// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO comments(post_id, user_id, content) VALUES ($1, $2, $3)
`

type CreateCommentParams struct {
	PostID  int32
	UserID  int32
	Content string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.db.ExecContext(ctx, createComment, arg.PostID, arg.UserID, arg.Content)
	return err
}

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notifications (user_id, type, message, related_id) VALUES ($1, $2, $3, $4)
`

type CreateNotificationParams struct {
	UserID    int32
	Type      string
	Message   string
	RelatedID int32
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createNotification,
		arg.UserID,
		arg.Type,
		arg.Message,
		arg.RelatedID,
	)
	return err
}

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (user_id, title, content, image) VALUES ($1, $2, $3, $4)
`

type CreatePostParams struct {
	UserID  int32
	Title   string
	Content string
	Image   sql.NullString
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Image,
	)
	return err
}

const createProfile = `-- name: CreateProfile :exec
INSERT INTO profiles (user_id, bio, avatar_url) VALUES ($1, $2, $3)
`

type CreateProfileParams struct {
	UserID    int32
	Bio       string
	AvatarUrl string
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.ExecContext(ctx, createProfile, arg.UserID, arg.Bio, arg.AvatarUrl)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users(username, email, password, created_at, updated_at) VALUES($1, $2, $3, NOW(), NOW())
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Email, arg.Password)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getCommentsByPostID = `-- name: GetCommentsByPostID :many
SELECT id, post_id, user_id, content, created_at FROM comments WHERE post_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetCommentsByPostID(ctx context.Context, postID int32) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsByUserID = `-- name: GetNotificationsByUserID :many
SELECT id, user_id, type, message, related_id, is_read, created_at FROM notifications WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetNotificationsByUserID(ctx context.Context, userID int32) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Message,
			&i.RelatedID,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, user_id, title, content, image, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, user_id, title, content, image, created_at, updated_at FROM posts ORDER BY created_at DESC
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT id, user_id, title, content, image, created_at, updated_at FROM posts WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetPostsByUserID(ctx context.Context, userID int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT id, user_id, bio, avatar_url, created_at, updated_at FROM profiles WHERE user_id = $1
`

func (q *Queries) GetProfileByUserID(ctx context.Context, userID int32) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUserID, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, password, created_at, updated_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :exec
UPDATE notifications SET is_read = TRUE WHERE id = $1
`

func (q *Queries) MarkNotificationAsRead(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markNotificationAsRead, id)
	return err
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts SET title = $2, content = $3, image = $4, updated_at = CURRENT_TIMESTAMP WHERE id = $1
`

type UpdatePostParams struct {
	ID      int32
	Title   string
	Content string
	Image   sql.NullString
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Image,
	)
	return err
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE profiles SET bio = $2, avatar_url = $3, updated_at = CURRENT_TIMESTAMP WHERE user_id = $1
`

type UpdateProfileParams struct {
	UserID    int32
	Bio       string
	AvatarUrl string
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateProfile, arg.UserID, arg.Bio, arg.AvatarUrl)
	return err
}
